{
  "version": 3,
  "sources": ["../../src/js/frontend.js"],
  "sourcesContent": ["document.addEventListener(\"DOMContentLoaded\", () => {\n    if (document.getElementById(\"astrologerWpBirthChartForm\")) {\n        init_searchCityOnInput(\n            \"astrologerWpBirthChartForm\",\n            \"astrologerWpBirthChartCityInput\",\n            \"astrologerWpBirthChartNationInput\",\n            \"astrologerWpBirthChartLatitudeInput\",\n            \"astrologerWpBirthChartLongitudeInput\",\n            \"astrologerWpBirthChartTimezoneInput\",\n            \"astrologerWpBirthChartCitySuggestions\",\n        );\n    }\n\n    if (document.getElementById(\"astrologerWpSynastryChartForm\")) {\n        init_searchCityOnInput(\n            \"astrologerWpSynastryChartForm\",\n            \"astrologerWpSynastryChartFirstCityInput\",\n            \"astrologerWpSynastryChartFirstNationInput\",\n            \"astrologerWpSynastryChartFirstLatitudeInput\",\n            \"astrologerWpSynastryChartFirstLongitudeInput\",\n            \"astrologerWpSynastryChartFirstTimezoneInput\",\n            \"astrologerWpSynastryChartFirstCitySuggestions\",\n        );\n\n        init_searchCityOnInput(\n            \"astrologerWpSynastryChartForm\",\n            \"astrologerWpSynastryChartSecondCityInput\",\n            \"astrologerWpSynastryChartSecondNationInput\",\n            \"astrologerWpSynastryChartSecondLatitudeInput\",\n            \"astrologerWpSynastryChartSecondLongitudeInput\",\n            \"astrologerWpSynastryChartSecondTimezoneInput\",\n            \"astrologerWpSynastryChartSecondCitySuggestions\",\n        );\n    }\n\n    if (document.getElementById(\"astrologerWpTransitChartForm\")) {\n        init_searchCityOnInput(\n            \"astrologerWpTransitChartForm\",\n            \"astrologerWpTransitChartSubjectCityInput\",\n            \"astrologerWpTransitChartSubjectNationInput\",\n            \"astrologerWpTransitChartSubjectLatitudeInput\",\n            \"astrologerWpTransitChartSubjectLongitudeInput\",\n            \"astrologerWpTransitChartSubjectTimezoneInput\",\n            \"astrologerWpTransitChartSubjectCitySuggestions\",\n        );\n\n        init_searchCityOnInput(\n            \"astrologerWpTransitChartForm\",\n            \"astrologerWpTransitChartTransitCityInput\",\n            \"astrologerWpTransitChartTransitNationInput\",\n            \"astrologerWpTransitChartTransitLatitudeInput\",\n            \"astrologerWpTransitChartTransitLongitudeInput\",\n            \"astrologerWpTransitChartTransitTimezoneInput\",\n            \"astrologerWpTransitChartTransitCitySuggestions\",\n        );\n    }\n});\n\nasync function init_searchCityOnInput(\n    formId,\n    cityInputId,\n    nationInputId,\n    latitudeInputId,\n    longitudeInputId,\n    timezoneInputId,\n    suggestionsId,\n) {\n    const form = document.getElementById(formId);\n    const cityInput = document.getElementById(cityInputId);\n    const nationInput = document.getElementById(nationInputId);\n    const latitudeInput = document.getElementById(latitudeInputId);\n    const longitudeInput = document.getElementById(longitudeInputId);\n    const timezoneInput = document.getElementById(timezoneInputId);\n    const suggestions = document.getElementById(suggestionsId);\n\n    function debounce(func, wait) {\n        let timeout;\n        return function (...args) {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(this, args), wait);\n        };\n    }\n\n    cityInput.addEventListener(\n        \"input\",\n        debounce(async () => {\n            const data = await searchCity(cityInput.value, \"\");\n            if (!data) {\n                return;\n            }\n            const suggestionsHtml = data.data\n                .map(\n                    (city) => /*HTML*/ `\n                    <li\n                        role=\"option\"\n                        class=\"dropdown-item\"\n                        data-value-country-code=\"${city.countryCode}\"\n                        data-value-city=\"${city.name}\"\n                        data-value-lat=\"${city.lat}\"\n                        data-value-lng=\"${city.lng}\"\n                        data-value-timezone=\"${city.timezonestr}\"\n                        tabindex=\"0\">\n                        ${city.name}, ${city.countryCode}\n                    </li>`,\n                )\n                .join(\"\");\n\n            // Append the suggestions to the form\n            suggestions.innerHTML = suggestionsHtml;\n            suggestions.style.display = \"block\";\n\n            // Add event listeners to the new dropdown items\n            const dropdownItems = form.querySelectorAll(\".dropdown-item\");\n            dropdownItems.forEach((item) => {\n                item.addEventListener(\"click\", (event) => {\n                    event.preventDefault();\n                    latitudeInput.value = event.target.getAttribute(\"data-value-lat\");\n                    longitudeInput.value = event.target.getAttribute(\"data-value-lng\");\n                    cityInput.value = event.target.getAttribute(\"data-value-city\");\n                    timezoneInput.value = event.target.getAttribute(\"data-value-timezone\");\n                    nationInput.value = event.target.getAttribute(\"data-value-country-code\");\n                    suggestions.style.display = \"none\";\n                    cityInput.value = `${event.target.getAttribute(\"data-value-city\")}, ${event.target.getAttribute(\"data-value-country-code\")}`;\n                });\n            });\n\n            dropdownItems.forEach((item) => {\n                item.addEventListener(\"keydown\", (event) => {\n                    if (event.key === \"Tab\") {\n                        // Remove aria-selected from all items\n                        dropdownItems.forEach((el) => el.setAttribute(\"aria-selected\", \"false\"));\n                        // Set aria-selected to true for the focused item\n                        item.setAttribute(\"aria-selected\", \"true\");\n\n                        latitudeInput.value = event.target.getAttribute(\"data-value-lat\");\n                        longitudeInput.value = event.target.getAttribute(\"data-value-lng\");\n                        cityInput.value = event.target.getAttribute(\"data-value-city\");\n                        timezoneInput.value = event.target.getAttribute(\"data-value-timezone\");\n                        nationInput.value = event.target.getAttribute(\"data-value-country-code\");\n                        cityInput.value = `${event.target.getAttribute(\"data-value-city\")}, ${event.target.getAttribute(\"data-value-country-code\")}`;\n                    } else if (event.key === \"Enter\") {\n                        // Hide the suggestions menu when \"Enter\" is pressed\n                        suggestions.style.display = \"none\";\n                    }\n                });\n            });\n        }),\n        500,\n    );\n}\n\nasync function searchCity(city, nation) {\n    let data = null;\n\n    if (city.length > 2) {\n        try {\n            const response = await fetch(\n                `${astrologerWpAjax.ajaxurl}?action=search_city&city=${city}&nation=${nation}`,\n            );\n            data = await response.json();\n        } catch (error) {\n            console.error(\"Error fetching city data:\", error);\n        }\n\n        return data;\n    }\n\n    return data;\n}\n"],
  "mappings": "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",
  "names": ["init_searchCityOnInput", "formId", "cityInputId", "nationInputId", "latitudeInputId", "longitudeInputId", "timezoneInputId", "suggestionsId", "__async", "form", "cityInput", "nationInput", "latitudeInput", "longitudeInput", "timezoneInput", "suggestions", "debounce", "func", "wait", "timeout", "args", "data", "searchCity", "suggestionsHtml", "city", "dropdownItems", "item", "event", "el", "nation", "error"]
}
